<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
       <!-- 实例化的类默认在初始化应用上下文时就实力所有单实例的bean -->
       
    <!-- 扫描类包，将标注Spring注解的类自动转化Bean，同时完成Bean的注入,如果没有设置则只能手动在该文件中配置bean -->
    <context:component-scan base-package="com.yysj.bangtang.service"/>
    <!-- 开启aop注解，并使用cglib创建代理-->
	<!-- <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy> -->
	
    <!-- 处理文件上传 -->
	 <bean id="multipartResolver"  
	    class="org.springframework.web.multipart.commons.CommonsMultipartResolver" >  
	    <property name="defaultEncoding" value="UTF-8"/> <!-- 默认编码 (ISO-8859-1)   -->
	    <property name="maxInMemorySize" value="10240"/> <!-- 最大内存大小 (10240)   -->
	     <property name="uploadTempDir" value="/temp"/>    <!-- 上传文件的临时路径,上传完成后，临时目录中的临时文件会被自动清除   -->
	     <property name="maxUploadSize" value="5242880"/><!--  最大文件大小5M,-1为无限止(-1)   -->
	</bean> 
    <!-- 文件加载器，加载类路径下的配置文件jdbc.properties -->
    
	<context:property-placeholder location="classpath:jdbc.properties" />
	
    <!-- jdbc.driverClass=com.mysql.jdbc.Driver
jdbc.jdbcUrl=jdbc:mysql://localhost:3306/bangtang?useUnicode=true&amp;characterEncoding=UTF-8
jdbc.user=root
jdbc.password=123456
连接池中保留最大连接数Default:15
jdbc.maxPoolSize=30
连接池中保留最小连接数
jdbc.minPoolSize=5
初始化时获取连接数取值应在minPoolSize和maxPoolSize的间Default:3
jdbc.initialPoolSize=6
最大空闲时间,120秒内未使用则连接被丢弃若为0则永不丢弃Default:0
jdbc.maxIdleTime=120
当连接池中连接耗尽时候c3p0次同时获取连接数Default:3
jdbc.acquireIncrement=3
 每3000秒检查所有连接池中空闲连接Default:0
jdbc.idleConnectionTestPeriod=3000 -->
    <!-- 配置数据源 ,使用c3p0数据源-->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close" >
	    <property name="driverClass" value="com.mysql.jdbc.Driver"/>
	   <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/bangtang?useUnicode=true&amp;characterEncoding=UTF-8"/>
	   <property name="user" value="root"/>
	   <property name="password" value="123456"/> <!-- 
	   <property name="driverClass" value="${jdbc.driverClass}"/>
	   <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
	   <property name="user" value="${jdbc.user}"/>
	   <property name="password" value="${jdbc.password}"/>   -->
	   
	   <!--连接池中保留最大连接数Default:15-->
	   <!-- <property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>
	   连接池中保留最小连接数
	   <property name="minPoolSize" value="${jdbc.minPoolSize}"/>
	   初始化时获取连接数取值应在minPoolSize和maxPoolSize的间Default:3
	   <property name="initialPoolSize" value="${jdbc.initialPoolSize}"/>
	   定义在从数据库获取新连接失败后重复尝试的次数。Default: 30
	   最大空闲时间,60秒内未使用则连接被丢弃若为0则永不丢弃Default:0
	   <property name="maxIdleTime" value="${jdbc.maxIdleTime}"/>
	   当连接池中连接耗尽时候c3p0次同时获取连接数Default:3
	   <property name="acquireIncrement" value="${jdbc.acquireIncrement}"/>
	   每60秒检查所有连接池中空闲连接Default:0
	   <property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"/>
		 -->
	</bean>
	
	<!--配置mybatis中 sqlSessinFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 加载mybatis的配置文件 -->
		<property name="configLocation" value="classpath:mybatis/SqlMapConfig.xml" />
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 通过MapperScannerConfigurer进行mapper扫描（建议使用） -->
	<!-- mapper批量扫描，从mapper包中扫描mapper接口，自动创建代理对象并且在Spring容器中注册遵循规范：
	将mapper.java和mapper.xml映射文件名保持一致，且在一个目录中，自动扫描出来的mapper的bean的id为mapper类名（首字母小写） -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	    <property name="basePackage" value="com.yysj.bangtang.mapper"/>
	    <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
	</bean>
</beans>