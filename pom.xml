<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.yysj</groupId>
  <artifactId>bangtang</artifactId>
  <packaging>war</packaging>
  <version>0.0.1-SNAPSHOT</version>
  <name>bangtang Maven Webapp</name>
  <url>http://maven.apache.org</url>
  
  <properties>
  	 <jsp-api.version>2.0</jsp-api.version><!--  jsp -->
    <servlet-api.version>3.1.0</servlet-api.version> <!-- servlet -->
    <jstl.version>1.2</jstl.version>	<!-- jstl标签 -->
    <mysqldriver.version>5.1.37</mysqldriver.version> <!-- mysql驱动 -->
      <log4j.version>2.1</log4j.version> <!--  日志类 -->
   <slf4j.version>1.7.5</slf4j.version>
   <spring.version>4.2.7.RELEASE</spring.version>  <!-- spring版本 -->
  	<junit.version>4.10</junit.version>  <!-- 测试类 -->
   <cglib.version>3.1</cglib.version>  <!-- 动态代理 -->
    <javassist.version>3.9.0.GA</javassist.version><!-- 提供@Resource,@Entity等注解接口，具体实现由Hibernate实现 -->
    <c3p0.version>0.9.1.2</c3p0.version><!--  数据源依赖版本 -->
    <beanutils.version>1.9.2</beanutils.version>  <!-- 将值映射到实体类中 -->
    <mybatis.version>3.3.1</mybatis.version>
     <mybatis-spring.version>1.2.5</mybatis-spring.version>
     <mybatis-ehcache.version>1.0.0</mybatis-ehcache.version>
     <ehcache.version>2.10.0</ehcache.version>
     <jsr250.version>1.0</jsr250.version> <!-- JSR-250注解 -->
      <json.version>2.4</json.version>
      <eamil.version>1.4</eamil.version>
      <jackson.version>1.9.13</jackson.version>
      <dom4j.version>1.6.1</dom4j.version>
      <jaxen.version>1.1.6</jaxen.version>
      <spring-integration-mail.version>3.0.6.RELEASE</spring-integration-mail.version>
 	  <jedis.version>2.8.1</jedis.version><!-- redis客户端 -->
 	  <redis.version>1.7.2.RELEASE</redis.version>
  </properties>
  <dependencies>
  <!-- spring对redis的支持 -->
    <dependency>
        <groupId>org.springframework.data</groupId>
        <artifactId>spring-data-redis</artifactId>
        <version>${redis.version}</version>
    </dependency>
   <!--  redis客户端 -->
  <dependency>
    <groupId>redis.clients</groupId>
    <artifactId>jedis</artifactId>
    <version>${jedis.version}</version>
    <type>jar</type>
    <scope>compile</scope>
</dependency>
  
 <!-- 分页插件 -->
  <dependency>
    <groupId>com.github.pagehelper</groupId>
    <artifactId>pagehelper</artifactId>
    <version>4.1.6</version>
</dependency>
  <!-- https://mvnrepository.com/artifact/jaxen/jaxen -->
<dependency>
    <groupId>jaxen</groupId>
    <artifactId>jaxen</artifactId>
    <version>${jaxen.version}</version>
</dependency>
  
  <!-- https://mvnrepository.com/artifact/dom4j/dom4j -->
<dependency>
    <groupId>dom4j</groupId>
    <artifactId>dom4j</artifactId>
    <version>${dom4j.version}</version>
</dependency>
  <!-- https://mvnrepository.com/artifact/org.springframework.integration/spring-integration-mail -->
<dependency>
    <groupId>org.springframework.integration</groupId>
    <artifactId>spring-integration-mail</artifactId>
    <version>${spring-integration-mail.version}</version>
</dependency>
  <!-- http://mvnrepository.com/artifact/javax.mail/mail -->
 <dependency>
    <groupId>javax.mail</groupId>
    <artifactId>mail</artifactId>
    <version>${eamil.version}</version>
</dependency> 
<!-- jackson-mapper-asl和jackson-core-asl包是SPringMVC进行json交互的依赖包 -->
<!-- https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-mapper-asl -->
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-core</artifactId>
    <version>2.4.3</version>
</dependency>
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.4.3</version>
</dependency>



   <!-- json格式依赖jar -->
	<dependency>
		<groupId>net.sf.json-lib</groupId>
		<artifactId>json-lib</artifactId>
		<version>${json.version}</version>
		<classifier>jdk15</classifier>
	</dependency>
   <!-- 使用JSR-250生命周期注解@Resouce @PostConstruct和@PreDestroy注解bean的初始化和析构回调方法 -->
        <dependency>
	       	<groupId>javax.annotation</groupId>
	       	<artifactId>jsr250-api</artifactId>
	       	<version>${jsr250.version}</version>
       </dependency> 
  <!-- mybatis -->
	  <dependency>
		<groupId>org.mybatis</groupId>
		<artifactId>mybatis</artifactId>
		<version>${mybatis.version}</version>
	</dependency>
	  <dependency>
		<groupId>org.mybatis</groupId>
		<artifactId>mybatis-spring</artifactId>
		<version>${mybatis-spring.version}</version>
	</dependency>
  <!-- mybatis和ehcache整合 -->
	 <dependency>
		<groupId>org.mybatis</groupId>
		<artifactId>mybatis-ehcache</artifactId>
		<version>${mybatis-ehcache.version}</version>
	</dependency>
	<dependency>
		<groupId>net.sf.ehcache</groupId>
		<artifactId>ehcache</artifactId>
		<version>${ehcache.version}</version>
	</dependency>
	
	
     <!-- junit测试类的依赖 -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
   <!--  log4j和slf4j -->
    <dependency>
	<groupId>log4j</groupId>
	<artifactId>log4j</artifactId>
	<version>1.2.17</version>
</dependency>
<dependency>
	<groupId>org.apache.logging.log4j</groupId>
	<artifactId>log4j-api</artifactId>
	<version>${log4j.version}</version>
</dependency>
    <dependency>
	<groupId>org.apache.logging.log4j</groupId>
	<artifactId>log4j-core</artifactId>
	<version>${log4j.version}</version>
</dependency>
<dependency>
	<groupId>org.slf4j</groupId>
	<artifactId>slf4j-api</artifactId>
	<version>${slf4j.version}</version>
</dependency>
<dependency>
	<groupId>org.slf4j</groupId>
	<artifactId>slf4j-log4j12</artifactId>
	<version>${slf4j.version}</version>
</dependency>

      <!-- 依赖的持久化类库 mysql driver -->
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>${mysqldriver.version}</version>
       </dependency> 
    
	   <!-- 上传文件需要的两个包 -->
	  <dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.3.1</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.2</version>
		</dependency> 
     <!-- spring的依赖 -->
    
    	 <!-- 支持aop注解 -->
  		<!--  <dependency>
  			<groupId>org.springframework</groupId>
  			<artifactId>spring-aop</artifactId>
  			<version>${spring.version}</version>
  		</dependency> 
  		 -->
	  	<dependency>
	        <groupId>org.springframework</groupId>
	        <artifactId>spring-context</artifactId>
	        <version>${spring.version}</version>
	     </dependency>
	  		
	  <!-- 	<dependency>
	        <groupId>org.springframework</groupId>
	        <artifactId>spring-context-support</artifactId>
	        <version>${spring.version}</version>
	     </dependency> -->
	    <dependency>
	           <groupId>org.springframework</groupId>
	           <artifactId>spring-beans</artifactId>
	           <version>${spring.version}</version>
	     </dependency>
	       <dependency>
	           <groupId>org.springframework</groupId>
	           <artifactId>spring-core</artifactId>
	           <version>${spring.version}</version>
	       </dependency> 
	      
	     <!-- 添加对SpringMVC的依赖 -->
	      <dependency>
           		<groupId>org.springframework</groupId>
           		<artifactId>spring-web</artifactId>
                <version>${spring.version}</version>
	      </dependency> 
	       <dependency>
	           <groupId>org.springframework</groupId>
	           <artifactId>spring-webmvc</artifactId>
	           <version>${spring.version}</version>
	      </dependency> 
       <!--数据源使用c3p0而不是commons-dbcp的-->
       <dependency>
			<groupId>c3p0</groupId>
			<artifactId>c3p0</artifactId>
			<version>${c3p0.version}</version>
		</dependency>
		 <!-- <dependency>
           <groupId>org.aspectj</groupId>
           <artifactId>aspectjweaver</artifactId>
           <version>${aspectjweaver.version}</version>
       </dependency> -->
       
		 <!-- Spring实现orm，提供了对hibernate的支持,HibernateTemplate就依赖该包 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-orm</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>  <!-- 二进制字节码解析 -->
                <groupId>javassist</groupId>
                <artifactId>javassist</artifactId>
                <version>${javassist.version}</version>
            </dependency> 
            
	    <!--  将表单中的数据复制到bean中 -->
	    <dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
			<version>${beanutils.version}</version>
		</dependency>
          <!-- 依赖的Servlet+jsp+jstl标签 -->
	    <dependency>
	        <groupId>javax.servlet</groupId>
	        <artifactId>javax.servlet-api</artifactId>
	        <version>${servlet-api.version}</version>
	        <scope>provided</scope>
	    </dependency>
	     <dependency>
	           <groupId>javax.servlet.jsp</groupId>
	           <artifactId>jsp-api</artifactId>
	           <version>${jsp-api.version}</version>
	           <scope>provided</scope>
	       </dependency>
	    <dependency>
	        <groupId>javax.servlet</groupId>
	        <artifactId>jstl</artifactId>
	        <version>${jstl.version}</version>
	    </dependency> 
  </dependencies>
  
  <build>
    <finalName>bangtang</finalName>
    <plugins>
    	 <plugin>  
              <groupId>org.apache.maven.plugins</groupId>  
              <artifactId>maven-compiler-plugin</artifactId>  
              <executions>  
                  <execution>  
                      <id>default-compile</id>  
                      <phase>compile</phase>  
                      <goals>  
                          <goal>compile</goal>  
                      </goals>  
                  </execution>  
              </executions>  
              <configuration>  
                  <encoding>UTF-8</encoding> 
                  <compilerArguments>  
                        <verbose />  
                        <bootclasspath>${java.home}\lib\rt.jar;${java.home}\lib\jce.jar</bootclasspath>  
                 </compilerArguments>   
              </configuration>  
          </plugin>  
          
          <!-- 使用UTF-8编码处理资源文件 ,没有设置版本因为该插件在超级POM中设定了-->
      <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-resources-plugin</artifactId>
          <configuration>
              <encoding>UTF-8</encoding>
          </configuration>
      </plugin>
      
     <!--  通过skip=true设置了跳过编译测试环节，这在运行项目时是可以的，因为项目运行时不需要关系test下代码的测试情况，但是在要运行test下的测试案例时要将skip设为false
     		也可以通过每次执行mvn命令时加上-Dmaven.test.skip=true or false 来设置是否跳过测试。
     		当然，默认情况下只会执行test/java包下面以
      -->
      <plugin>
           <artifactId>maven-surefire-plugin</artifactId>
           <configuration>
               <skip>true</skip>  <!-- 跳过执行测试代码 -->
           </configuration> 
       </plugin>
    </plugins>
  </build>
</project>
